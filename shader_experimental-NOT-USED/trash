#version 330 core
out vec4 fragColor;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};


in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;
uniform Light light;

uniform Material material;

vec3 CalcLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir);
vec3 CalcLampLight(LampLight lampLight, vec norm, vec3 aPos, vec3 viewDir);


void main() {
  // ambient
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);

  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));

  // specular
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));

  vec3 result = ambient + diffuse + specular;
  fragColor = vec4(result, 1.0);
}


vec3 CalcLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));
  vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));
  return (ambient + diffuse + specular)
}

vec3 CalcLampLight(LampLight lampLight, vec3 norm, vec3 aPos, vec3 viewDir) {
  vec3 lightDir = normalize(lampLight.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 ambient = lampLight.ambient * vec3(texture(first_texture, aTexCoord));
  vec3 diffuse = lampLight.diffuse * diff * vec3(texture(first_texture, aTexCoord));
  vec3 specular = lampLight.specular * spec * vec3(texture(second_texture, aTexCoord));
  return (ambient + diffuse + specular)
}
